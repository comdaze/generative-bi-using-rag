--- a/application/nlq/core/state_machine.py
+++ b/application/nlq/core/state_machine.py
@@ -584,6 +584,31 @@
                         sql_search_result=sub_task_sql_result)
                     agent_sql_search_result.append(each_task_sql_search_result)
 
+            # 如果没有成功执行的SQL，添加详细的错误信息但继续流程
+            if len(filter_deep_dive_sql_result) == 0:
+                error_details = []
+                for i in range(len(self.agent_search_result)):
+                    task_info = {
+                        "query": self.agent_search_result[i]["query"],
+                        "sql": self.agent_search_result[i]["sql"]
+                    }
+                    
+                    # 获取错误信息（如果有）
+                    task_res = get_sql_result_tool(
+                        self.context.database_profile,
+                        self.agent_search_result[i]["sql"])
+                    if task_res["status_code"] == 500:
+                        task_info["error"] = task_res["error_info"]
+                    else:
+                        task_info["error"] = "Unknown error or no data returned"
+                        
+                    error_details.append(task_info)
+                
+                # 记录详细的错误信息
+                self.answer.error_log[QueryState.AGENT_DATA_SUMMARY.name] = {
+                    "message": "All agent tasks failed to execute SQL successfully.",
+                    "details": error_details
+                }
+                
+                # 添加一个标志表示有SQL执行错误
+                self.has_sql_errors = True
+                
+                # 创建一个特殊的错误消息
+                self.agent_data_analyse_result = "No data was found for your query. This could be because the SQL queries failed to execute properly or because there is no matching data in the database."
+                self.agent_valid_data = []
+
+            # 只有当有成功执行的SQL结果时，才调用data_analyse_tool
+            if len(filter_deep_dive_sql_result) > 0:
+                agent_data_analyse_result, model_response = data_analyse_tool(self.context.model_type,
+                                                                              self.context.database_profile["prompt_map"],
+                                                                              self.context.query_rewrite,
+                                                                              json.dumps(filter_deep_dive_sql_result,
+                                                                                         ensure_ascii=False), "agent",
+                                                                              self.context.database_profile["prompt_environment"])
+                self.token_info[QueryState.AGENT_DATA_SUMMARY.name] = model_response.token_info
+            else:
+                # 使用之前设置的错误消息
+                agent_data_analyse_result = self.agent_data_analyse_result if hasattr(self, 'agent_data_analyse_result') else "No data available for analysis."
+                # 为空结果设置一个空的token_info
+                if QueryState.AGENT_DATA_SUMMARY.name not in self.token_info:
+                    self.token_info[QueryState.AGENT_DATA_SUMMARY.name] = {"input_tokens": 0, "output_tokens": 0}
+
+            self.agent_valid_data = filter_deep_dive_sql_result
+            self.agent_data_analyse_result = agent_data_analyse_result
+            self.answer.agent_search_result.agent_summary = agent_data_analyse_result
+            self.answer.agent_search_result.agent_sql_search_result = agent_sql_search_result
+            self.transition(QueryState.COMPLETE)
+        except Exception as e:
+            self.answer.error_log[QueryState.AGENT_DATA_SUMMARY.name] = str(e)
+            logger.error(
+                f"The context is {self.context.search_box}, handle_agent_analyze_data encountered an error: {e}")
+            self.transition(QueryState.ERROR)
-            agent_data_analyse_result, model_response = data_analyse_tool(self.context.model_type,
-                                                                          self.context.database_profile["prompt_map"],
-                                                                          self.context.query_rewrite,
-                                                                          json.dumps(filter_deep_dive_sql_result,
-                                                                                     ensure_ascii=False), "agent",
-                                                                          self.context.database_profile["prompt_environment"])
-            self.token_info[QueryState.AGENT_DATA_SUMMARY.name] = model_response.token_info
-            self.agent_valid_data = filter_deep_dive_sql_result
-            self.agent_data_analyse_result = agent_data_analyse_result
-            self.answer.agent_search_result.agent_summary = agent_data_analyse_result
-            self.answer.agent_search_result.agent_sql_search_result = agent_sql_search_result
-            self.transition(QueryState.COMPLETE)
-        except Exception as e:
-            self.answer.error_log[QueryState.AGENT_DATA_SUMMARY.name] = str(e)
-            logger.error(
-                f"The context is {self.context.search_box}, handle_agent_analyze_data encountered an error: {e}")
-            self.transition(QueryState.ERROR)
